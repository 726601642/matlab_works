clc;
clear all;
close all;

%%
load Speech4.mat;
K=512;%bands
R=K/4;%decimations
Fs=8000;
M=6;%96ms
% s1=Speech4(1,:);
% s2=Speech4(4,:);
% a1=s1/max(abs(s1));
% a2=s2/max(abs(s2));
% s1=[a1,a2,a1];
% s2=[a2,a1,a2];
% s=[s1',s2'];
% aorig=rand(2);
aorig=eye(2);
% s=wavread('mixed_babble_i_8k');
% s=s(2e5:end,:);
% [s,fs]=wavread('test_Su2_Ce_A_mix');
% s=resample(s,Fs,fs);
% a1=wavread('mixture1');
% a2=wavread('mixture2');
a1=wavread('x2-1');
a2=wavread('x2-2');
s=[[a1;a1],[a2;a2]];
% s=[s;s];
%%
[s1, fs] = wavread('.\CHINESE(MANDARIN)\Ch_m2');
s1 = resample(s1, Fs, fs);
s1=s1/max(abs(s1));
ISM_RIR_bank(my_ISM_setup_ii, 'ISM_RIRs_ii.mat');
AuData_s1 = ISM_AudioData('ISM_RIRs_ii.mat', s1);
[s2, fs] = wavread('./FS16K/destroyerengine');
s2 = resample(s2, Fs, fs);
s2=s2/max(abs(s2));
ISM_RIR_bank(my_ISM_setup_iii, 'ISM_RIRs_iii.mat');
AuData_s2 = ISM_AudioData('ISM_RIRs_iii.mat', s2);
idx = min(length(AuData_s1(:,1)), length(AuData_s2(:,1)));
AuData_s2 = [AuData_s2(1:idx,:);AuData_s2(1:idx,:)];
AuData_s1 = [AuData_s1(1:idx,:);AuData_s1(1:idx,:)];
a1=AuData_s1(:,1)+AuData_s2(:,1);
a2=AuData_s1(:,2)+AuData_s2(:,2);
% s=[a1,a2];
%%
Iter=R*floor(length(s(:,1))/R);
mixedsig=s*aorig';%transpose
output=zeros(2,Iter+R-1);
Rs=60;
L1=4*K;
L2=64;
wins=fir1(L1-1,1/K,chebwin(L1,Rs));
winv=fliplr(wins);
buffer=zeros(L1,1);
buffer1=zeros(L1,1);
bufferD=zeros(2,L2,1+K/2);
ica_input=zeros(2,L2,1+K/2);
pca_input=zeros(2,L2,1+K/2);
fb=zeros(K,1);
fb1=zeros(K,1);
buffersb=zeros(K,L1/R);
buffersb1=zeros(K,L1/R);
out=zeros(R,1);
otu=zeros(R,1);
t=rand(2,2,1+K/2);
v=rand(2,2,1+K/2);
P=rand(2,2,1+K/2);
tmpyf=zeros(2,L2,1+K/2);
y4=zeros(2,1+K/2);
y2=zeros(2,1+K/2);
lambda=0.96;
alphaS=0.98;
beta=1e-8;
w=zeros(1+K/2,M);
XFm=zeros(1+K/2,M);
S_vv=ones(1+K/2,1);
Ek=zeros(1+K/2,1);
Vk=zeros(1+K/2,1);
Yk=zeros(1+K/2,1);
eK=zeros(1+K/2,1);
%d=[-0.043,0.043];
d=[-0.02,0.02];
theta=[-pi/3,pi/3];%2*pi*d*sin(theta)/lambda
SM=zeros(1+K/2,1);
P1=zeros(Iter/R+1,1);
P2=zeros(Iter/R+1,2);
% P2=[];
mixedsig_white=zeros(2,L2,1+K/2);
rad=[-90:5:90]*pi/180;
freq=[0:1:K/2]*Fs/K;
kc=2*pi*freq/343;
DOA=zeros(2,1+K/2);
DOAs=zeros(2,1+K/2);%sorted DOA

for k=2:K/2,
    unv=exp(j*kc(k)*d'*sin(theta));
    v(:,:,k)=inv(unv);
    t(:,:,k)=eye(2,2);
end
% a=load('BSS.mat');
% v=a.v;
T=v;%Initial Condition
P=t;
V=T;
W=P;
bufferIn=zeros(K,1);
bufferin=zeros(K,1);
olv_buffer=zeros(K-R,1);
ola_buffer=zeros(K-R,1);
dcgain=R/sum(hanning(K));
winh=sqrt(dcgain*hanning(K));
cnt=0;
See=ones(1+K/2,1);
Snn=ones(1+K/2,1);
pSnr=ones(1+K/2,1);
pSNR=ones(1+K/2,1);
gain=ones(1+K/2,1);
Gain=ones(1+K/2,1);
alpha_d=0.98;
res=size(rad,2);
DOAm=zeros(2,1);

for m=1:R:Iter,
    bufferIn=[bufferIn(end-K+R+1:end);mixedsig(m:m+R-1,1)];
    bufferin=[bufferin(end-K+R+1:end);mixedsig(m:m+R-1,2)];
    Zk1=fft(bufferIn.*winh,K);
    Zk2=fft(bufferin.*winh,K);

    if mod(cnt,L2)==0,
        for k=2:1:K/2,
            % t(:,:,k)=W(:,:,k);
            unv=diag(diag(inv(V(:,:,k)+eps*eye(2))));%[[a,b];[c,d]]*[[1/a,0];[0,1/d]]=[[1,b/d];[c/a,1]]
            v(:,:,k)=unv*V(:,:,k);%[[1,h21];[h12,1]]
            amv=exp(j*kc(k)*d'*sin(rad));%[d1;d2]
            F1=V(1,:,k)*amv;
            F2=V(2,:,k)*amv;
            [f1,DOA1]=min(abs(F1),[],2);%beam-1
            [f2,DOA2]=min(abs(F2),[],2);%beam-2
            DOA(:,k)=-pi/2+[DOA1-1;DOA2-1]*(pi/(res-1));
            [DOAs(:,k),ix]=sort(DOA(:,k));
            v(:,:,k)=v(ix,:,k);
            %             unv=inv(V(:,:,k)+eps*eye(2));%H(f)=[exp(j*kc*d1*sin(t1)),exp(j*kc*d1*sin(t2));...]
            %             v(:,:,k)=diag(diag(unv))*V(:,:,k);
            %             DOA1=real(asin(angle(unv(1,1)/unv(2,1))/kc(k)/(d(1)-d(2))));%[[exp(j*kc(k)*d1*sin(t1));...]]
            %             DOA2=real(asin(angle(unv(1,2)/unv(2,2))/kc(k)/(d(
            %             1)-d(2))));%[[exp(j*kc*d2*sin(t2))]]
            %             DOA(:,k)=[DOA1;DOA2];%left-right
            %             [DOAs(:,k),ix]=sort(DOA(:,k));%[2,1]or[1,2]
            %             v(:,:,k)=v(ix,:,k);
        end
        %         varm=sqrt(var(DOAs,[],2));
        %         F=[1;1+K/2];
        %         I=zeros(1+K/2,1);
        %         for k=2:1:K/2,
        %             amv=exp(j*kc(k)*d'*sin(rad));%varying over theta
        %             amv1=exp(j*kc(k)*d'*sin(DOAs(1,k)));%source-1
        %             amv2=exp(j*kc(k)*d'*sin(DOAs(2,k)));%source-2
        %             F0=norm(v(1,:,k)*amv,2)^2;%full,directions
        %             F1=abs(v(1,:,k)*amv1)^2;%exp(j*kc*[d1;d2]*sin(theta))
        %             F2=norm(v(2,:,k)*amv,2)^2;%full,directions
        %             F3=abs(v(2,:,k)*amv2)^2;%exp(j*kc*[d1;d2]*sin(theta))
        %             D1=10*log10(F0/F1);
        %             D2=10*log10(F2/F3);
        %             if((D1>10)&&(D2>10)&&(DOAs(1,k)<1.5*varm(1))&&(DOAs(2,k)<varm(2))),
        %                 F=[F;k];
        %                 I(k)=1;
        %             end
        %         end
        %         DOAm=0.5*DOAm+0.5*mean(DOAs(:,F),2);
        % P2=[P2,DOAm];
        %         for k=2:1:K/2,
        %             if(I(k)==0),
        %                 ref=v(:,:,k)*ica_input(:,:,k);%[[y1];[y2]]
        %                 s1=0;
        %                 s2=0;
        %                 for n=2:1:K/2,
        %                     if(I(n)==1),
        %                         temp=v(1,:,n)*ica_input(:,:,n);%[[u1]]
        %                         s1=s1+ref(1,:)*temp';
        %                         s2=s2+ref(2,:)*temp';
        %                     end
        %                 end
        %                 [t,idx]=sort(abs([s2;s1]));
        %                 v(:,:,k)=v(idx,:,k);
        %                 I(k)=1;
        %             end
        %         end
        for k=2:1:K/2,
            tmpyf(:,:,k)=v(:,:,k)*ica_input(:,:,k);
            % ica_input(:,:,k)=t(:,:,k)*pca_input(:,:,k);
        end

        % W=P;%identity
        V=v;%beam-pattern
        % pca_input=bufferD;
        ica_input=bufferD;
    end

    %     for k=1:1:1+K/2,
    %         for iter=1:1:2048/L2,
    %             u=W(:,:,k)*pca_input(:,:,k);
    %             nlr=-u;
    %             error=eye(2)+nlr*u'/L2;
    %             W(:,:,k)=W(:,:,k)+0.025*error*W(:,:,k);
    %         end
    %     end

    for k=1:1:1+K/2,
        for iter=1:1:2048/L2,
            u=V(:,:,k)*ica_input(:,:,k);
            nlr=-2*tanh(real(u))-j*2*tanh(imag(u));
            % nlr=-sign(real(u))-j*sign(imag(u));
            % nlr=-tanh(100*abs(u)).*exp(j*angle(u));
            error=eye(2)+nlr*u'/L2;
            V(:,:,k)=V(:,:,k)+0.025*error*V(:,:,k);
        end
        SM(k,1)=norm(error,'fro');
    end
    P1(1+floor(m/R),1)=sum(SM,1);

    for k=1:1:1+K/2,
        x=[Zk1(k,1);Zk2(k,1)];
        bufferD(:,:,k)=[bufferD(:,2:end,k),x];%[0...L-1]
    end

    for k=1:1:1+K/2,%Kurtosis
        y4(:,k)=alphaS*y4(:,k)+(1-alphaS)*abs(tmpyf(:,1+cnt,k)).^4;%E[|y(k,l)|^4],1/0.04*16ms=400ms
        y2(:,k)=alphaS*y2(:,k)+(1-alphaS)*abs(tmpyf(:,1+cnt,k)).^2;%E[|y(k,l)|^2]
    end

    p1=sum(y4(1,:)-3*y2(1,:).^2,2);
    p2=sum(y4(2,:)-3*y2(2,:).^2,2);
    P2(1+floor(m/R),:)=[p1,p2];
    if (p1>=p2),
        for k=1:1+K/2,
            Vk(k,1)=tmpyf(1,1+cnt,k);
            Ek(k,1)=tmpyf(2,1+cnt,k);
        end
    else
        for k=1:1+K/2,
            Vk(k,1)=tmpyf(1,1+cnt,k);
            Ek(k,1)=tmpyf(2,1+cnt,k);
        end
    end

    XFm=[XFm(:,2:end),diag(Ek*Ek')];
    %     for k=1:1:1+K/2,
    %         eK(k,1)=abs(Vk(k,1))^2-XFm(k,:)*w(k,:)';
    %         if(abs(Vk(k,1))<=abs(Ek(k,1))),
    %             w(k,:)=w(k,:)+0.1*eK(k,1)*XFm(k,:)/max(eps,XFm(k,:)*XFm(k,:)');
    %         end
    %         Yk(k,1)=sqrt(max(abs(Vk(k,1))^2-16*XFm(k,:)*w(k,:)',0))*exp(j*angle(Vk(k,1)));
    %     end
    for k=1:1:1+K/2,
        if(abs(Vk(k,1))<abs(Ek(k,1))),
            See(k,1)=0.25*See(k,1)+0.75*abs(Vk(k,1))^2;
        elseif(abs(Ek(k,1))<abs(Vk(k,1))),
            Snn(k,1)=0.25*Snn(k,1)+0.75*abs(Ek(k,1))^2;
        end
    end
    postSnr=diag(Vk*Vk')./max(eps,See);
    ksi=alpha_d*(gain.^2.*pSnr)+(1-alpha_d)*max(postSnr-1,0);
    pSnr=postSnr;
    gain=ksi./(1+ksi);
    Yk=Vk.*gain;
    postSNR=diag(Ek*Ek')./max(eps,Snn);
    xsi=alpha_d*(Gain.^2.*pSNR)+(1-alpha_d)*max(postSNR-1,0);
    pSNR=postSNR;
    Gain=xsi./(1+xsi);
    Ok=Ek.*Gain;

    z1=real(ifft([Vk(1:1+K/2);conj(Vk(K/2:-1:2))],K));
    z2=real(ifft([Ek(1:1+K/2);conj(Ek(K/2:-1:2))],K));
    z1=z1.*winh;
    z2=z2.*winh;
    temp=ola_buffer+z1(1:K-R);
    ola_buffer=[temp(1+R:end);z1(end-R+1:end)];
    output(1,m:m+R-1)=temp(1:R)';
    temp=olv_buffer+z2(1:K-R);
    olv_buffer=[temp(1+R:end);z2(end-R+1:end)];
    output(2,m:m+R-1)=temp(1:R)';
    cnt=mod(cnt+1,L2);
end

for m=1:R:Iter,
    buffer=[buffer(end-L1+R+1:end);mixedsig(m:m+R-1,1)];
    buffer1=[buffer1(end-L1+R+1:end);mixedsig(m:m+R-1,2)];
    wb=fliplr(winv.*buffer');
    wb1=fliplr(winv.*buffer1');
    fb(1)=sum(wb(1:K:end),2);
    fb1(1)=sum(wb1(1:K:end),2);

    for k=1:1:K-1,
        fb(1+k)=sum(wb(1+K-k:K:end),2);
        fb1(1+k)=sum(wb1(1+K-k:K:end),2);
    end
    tmpb=circshift(fb,m-1);
    tmpb1=circshift(fb1,m-1);
    tmpxf=fft(tmpb,K);
    tmpx1f=fft(tmpb1,K);

    %%ICA demixed
    if mod(cnt,L2)==0,
        W=T;
        for k=2:1:K/2,
        end
        mixedsig_white=bufferD;
    end

    for k=1:1:1+K/2,
        for iter=1:1:2048/L2,
            u=W(:,:,k)*mixedsig_white(:,:,k);
            % nlr=-2*tanh(real(u))-j*2*tanh(imag(u));
            % nlr=-sign(real(u))-j*sign(imag(u));
            nlr=-tanh(100*abs(u)).*exp(j*angle(u));
            error=eye(2)+nlr*u'/L2;
            W(:,:,k)=W(:,:,k)+0.025*error*W(:,:,k);
        end
        SM(k,1)=norm(error,'fro');
    end

    for k=1:1:1+K/2,
        x=[tmpxf(k,1);tmpx1f(k,1)];
        bufferD(:,:,k)=[bufferD(:,2:end,k),x];
    end

    for k=1:1:1+K/2,%Kurtosis
        y4(:,k)=alphaS*y4(:,k)+(1-alphaS)*abs(tmpyf(:,k)).^4;%E[|y(k,l)|^4]
        y2(:,k)=alphaS*y2(:,k)+(1-alphaS)*abs(tmpyf(:,k)).^2;%E[|y(k,l)|^2]
    end
    p1=sum(y4(1,:)-3*y2(1,:).^2,2);
    p2=sum(y4(2,:)-3*y2(2,:).^2,2);

    if p1>p2,
        Vk=tmpyf(1,:).';%speech
        Ek=tmpyf(2,:).';%ref
    else
        Vk=tmpyf(2,:).';%speech
        Ek=tmpyf(1,:).';%ref
    end

    vb=real(ifft([Vk(1:1+K/2);conj(Vk(K/2:-1:2))],K));
    vb1=real(ifft([Ek(1:1+K/2);conj(Ek(K/2:-1:2))],K));
    buffersb=[vb,buffersb(:,1:end-1)];%[new,...,old]
    buffersb1=[vb1,buffersb1(:,1:end-1)];
    for k=0:1:R-1,
        windw=wins(1+k:R:end);
        out(1+k)=K*R*buffersb(1+mod((m-1)+k,K),:)*windw';
        otu(1+k)=K*R*buffersb1(1+mod((m-1)+k,K),:)*windw';
    end
    output(1,m:m+R-1)=out;
    output(2,m:m+R-1)=otu;
    cnt=cnt+1;
end

bP=zeros(1+K/2,length(rad));%Directive Pattern
bPI=zeros(1+K/2,length(rad));
for k=1:1:1+K/2,
    amv=exp(j*kc(k)*d'*sin(rad));%[position,direction],2*rad
    v(1,:,k)=v(1,:,k)/norm(v(1,:,k));
    v(2,:,k)=v(2,:,k)/norm(v(2,:,k));
    bP(k,:)=v(1,:,k)*amv;
    bPI(k,:)=v(2,:,k)*amv;
end

subplot(1,2,1);contourf(rad,freq,abs(bP),10);colorbar;xlabel('rad');ylabel('freq(Hz)');
subplot(1,2,2);contourf(rad,freq,abs(bPI),10);colorbar;xlabel('rad');ylabel('freq(Hz)');

savefile='BSS.mat';
save(savefile,'v');
